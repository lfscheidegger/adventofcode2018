for (int idx = 1; idx <= E; idx++) {
  D = idx;
  F = B * D;
  if (E == F) {
    A += B;
  }
}

if (E == F) {
  A += B;
}
D += 1




       // This gets executed only when the machine first starts
       0  IP <- IP + 16,        C <- IP + 16 [jmpi "init"]








top:   1  B  <- 1                            [B = 1]
       2  D  <- 1                            [D = 1]

       3  F  <- B * D                        [F = B * D]

       // happens when B divides F
       4  F  <- E == F ? 1 : 0               [F <- E == F ? 1 : 0] // if (E == F) { goto "left" }
       5  IP <- IP + F,         C <- IP + F
       6  IP <- IP + 1,         C <- IP + 1       
       7  A  <- A + B
       8  D  <- D + 1

       // happens when B does not divide F
       9  F  <- D > E ? 1 : 0                [F <- D > E ? 1 : 0]
       10 IP <- IP + F,         C <- IP + F
       11 IP <- 2,              C <- 2

       12 B  <- B + 1

       13 F  <- B > E ? 1 : 0
       14 IP <- IP + F,         C <- IP + F

       15 IP <- 1               C <- 1

       // end
       16 IP <- IP * IP         C <- C * C









       // This is to initialize E and F for both
       // parts 1 and 2
init:  17 E  <- E + 2                       [E += 2]
       18 E  <- E * E                       [E *= E]
       19 E  <- C,IP * E                    [E *= 19]
       20 E  <- E * 11                      [E *= 11]
       21 F  <- F + 6                       [F += 6]
       22 F  <- C,IP * F                    [F *= 22]
       23 F  <- F + 11                      [F += 11]
       24 E  <- E + F                       [E = E + F]

       // All of this is to make E and F huge for part 2
       25 IP <- A + IP,         C <- C + A  [jmprel A + 1] // No jump
                                                              when A is zero
       26 IP <- 0,              C <- 0      [jmpi "top"]
       27 F  <- C,IP                        [F = 27]
       28 F  <- C,IP * F                    [F *= 28]
       29 F  <- C,IP + F                    [F += 29]
       30 F  <- C,IP * F                    [F *= 30]
       31 F  <- F * 14                      [F *= 14]
       32 F  <- C,IP * F                    [F *= 32]
       33 E  <- E + F                       [E = E + F]
       34 A  <- 0                           [A = 0]
       35 IP <- 0               C <- 0      [jmpi "top"]




#ip 2
0  addi C 16 C,IP   IP <- IP + 16,        C <- IP + 16
1  seti 1  - B      B  <- 1
2  seti 1  - D      D  <- 1
3  mulr B  D F      F  <- B * D
4  eqrr F  E F      F  <- F == E ? 1 : 0
5  addr F  C C,IP   IP <- IP + F,         C <- IP + F
6  addi C  1 C,IP   IP <- IP + 1,         C <- IP + 1
7  addr B  A A      A  <- B * A
8  addi D  1 D      D  <- D + 1
9  gtrr D  E F      F  <- D > E ? 1 : 0
10 addr C  F C,IP   IP <- IP + F,         C <- IP + F
11 seti 2  - C,IP   IP <- 2,              C <- 2
12 addi B  1 B      B  <- B + 1
13 gtrr B  E F      F  <- B > E ? 1 : 0
14 addr F  C C,IP   IP <- IP + F,         C <- IP + F
15 seti 1  - C,IP   IP <- 1               C <- 1
16 mulr C  C C,IP   IP <- IP * IP         C <- C * C
17 addi E  2 E      E  <- E + 1
18 mulr E  E E      E  <- E * E
19 mulr C  E E      E  <- E * C,IP
20 muli E 11 E      E  <- E * 11
21 addi F  6 F      F  <- F + 6
22 mulr F  C F      F  <- F * C,IP
23 addi F 19 F      F  <- F + 11
24 addr E  F E      E  <- F + E
25 addr C  A C,IP   IP <- IP + A,         C <- C + A
26 seti 0  - C,IP   IP <- 0,              C <- 0
27 setr C  - F      F  <- C,IP
28 mulr F  C F      F  <- F * C,IP
29 addr C  F F      F  <- F + C,IP
30 mulr C  F F      F  <- F * C,IP
31 muli F 14 F      F  <- F * 14
32 mulr F  C F      F  <- F * C,IP
33 addr E  F E      E  <- F + E
34 seti 0  - A      A  <- 0
35 seti 0  - C,IP   IP <- 0               C <- 0




#ip 2
0  addi 2 16 2
1  seti 1  0 1
2  seti 1  3 3
3  mulr 1  3 5
4  eqrr 5  4 5
5  addr 5  2 2
6  addi 2  1 2
7  addr 1  0 0
8  addi 3  1 3
9  gtrr 3  4 5
10 addr 2  5 2
11 seti 2  6 2
12 addi 1  1 1
13 gtrr 1  4 5
14 addr 5  2 2
15 seti 1  1 2
16 mulr 2  2 2
17 addi 4  2 4
18 mulr 4  4 4
19 mulr 2  4 4
20 muli 4 11 4
21 addi 5  6 5
22 mulr 5  2 5
23 addi 5 19 5
24 addr 4  5 4
25 addr 2  0 2
26 seti 0  7 2
27 setr 2  6 5
28 mulr 5  2 5
29 addr 2  5 5
30 mulr 2  5 5
31 muli 5 14 5
32 mulr 5  2 5
33 addr 4  5 4
34 seti 0  7 0
35 seti 0  3 2
